#! /usr/bin/env python

from os import path, chdir
from subprocess import Popen, PIPE
from optparse import OptionParser
from sys import argv, stdout
from fnmatch import fnmatch

def run_shell(cmd):
    return Popen(cmd, shell=True, stdout=PIPE).stdout.read().splitlines()

def git_files(git_repositary_path, options, baselevel=''):

    excludes = []

    for filepath in run_shell('git ls-files --cached --full-name --no-empty-directory'):
        fullpath = path.join(baselevel, filepath)
        filename = path.basename(filepath)
        
        # right now every time we find a .gitattributes, we
        # overwrite the previous patterns. might be nice to
        # use a dictionary that retains the patterns on a 
        # parent-path level. But this works fine for a top-level
        # file in the main repo and top level of submodules
        if options.exclude and filename == '.gitattributes':
            excludes = []
            fh = open(filepath, 'r')
            for line in fh:
                if not line: break
                tokens = line.strip().split()
                if 'export-ignore' in tokens[1:]:
                    excludes.append(tokens[0])
            fh.close()

        if not filename.startswith('.git') and not path.isdir(filepath):
        
            # check the patterns first
            ignore = False
            for pattern in excludes:
                if fnmatch(filepath, pattern) or fnmatch(filename, pattern):
                    if options.verbose: print 'Exclude pattern matched (%s): %s' % (pattern, filepath)
                    ignore = True
                    break
            if ignore:
                continue
            
            # baselevel is needed to tell the arhiver where it have to extract file
            yield filepath, fullpath
    
    # get paths for every submodule
    for submodule in run_shell("git submodule --quiet foreach 'pwd'"):
        chdir(submodule)
        # in order to get output path we need to exclude repository path from the submodule path
        submodule = submodule[len(git_repositary_path)+1:]
        # recursion allows us to process repositories with more than one level of submodules
        for git_file in git_files(git_repositary_path, options, submodule):
            yield git_file

def main():
    git_repositary_path = path.abspath('')

    parser = OptionParser(usage="usage: %prog [-v] [--prefix PREFIX] [--no-exclude] OUTPUT_FILE", version="%prog 1.0")
    
    parser.add_option('--prefix', type='string', dest='prefix', 
                        default='', help="prepend PREFIX to each filename in the archive")
                        
    parser.add_option('-v', '--verbose', action='store_true', dest='verbose', help='enable verbose mode')

    parser.add_option('--no-exclude', action='store_false', dest='exclude', 
                        default=True, help="Dont read .gitattributes files for patterns containing export-ignore attrib")
                        
    parser.add_option(
        '--extra', action='append', dest='extra', default=[],
        help="Any additional files to include in the archive.")

    options, args = parser.parse_args()
    
    if len(args) != 1:
        parser.error('You must specify exactly one output file')
    
    (output_file,) = args
    
    if path.isdir(output_file):
        parser.error('You cannot use directory as output')

    _, _, format = output_file.rpartition(".")

    if format.lower() == 'zip':
        from zipfile import ZipFile, ZIP_DEFLATED
        output_archive = ZipFile(path.abspath(output_file), 'w')
        add = lambda name, arcname: output_archive.write(name, options.prefix + arcname, ZIP_DEFLATED)

    elif format.lower() in ['tar', 'bz2', 'gz']:
        import tarfile
        t_mode = ('w:%s' % format) if format != 'tar' else 'w'
           
        output_archive = tarfile.open(path.abspath(output_file), t_mode)
        add = lambda name, arcname: output_archive.add(name, options.prefix + arcname)
    else:
        raise RuntimeError("Unknown format: '%s'" % format)
        
    # extra files first (we may change folder later)
    for name in options.extra:
        add(name, name)
    for name, arcname in git_files(git_repositary_path, options):
        if options.verbose: print 'Compressing ' + arcname + '...'
        add(name, arcname)
    output_archive.close()

if __name__ == "__main__":
    main()
